generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Account {
//   accountId          String    @id @default(cuid()) @map("account_id") @db.VarChar(50)
//   userId             String    @map("user_id") @db.VarChar(50)
//   providerType       String    @map("provider_type") @db.VarChar(50)
//   provider           String    @map("provider_id") @db.VarChar(50)
//   providerAccountId  String    @map("provider_account_id") @db.VarChar(50)
//   refreshToken       String?   @map("refresh_token") @db.VarChar(50)
//   accessToken        String?   @map("access_token") @db.VarChar(50)
//   accessTokenExpires DateTime? @map("access_token_expires")
//   createdAt          DateTime  @default(now()) @map("created_at")
//   updatedAt          DateTime  @updatedAt @map("updated_at")
//   users              User      @relation(fields: [userId], references: [userId])

//   @@unique([provider, providerAccountId])
//   @@index([userId])
//   @@map("accounts")
// }

// model Session {
//   sessionId    String   @id @default(cuid()) @map("session_id") @db.VarChar(50)
//   userId       String   @map("user_id") @db.VarChar(50)
//   expires      DateTime @map("expires")
//   sessionToken String   @unique @map("session_token") @db.VarChar(50)
//   accessToken  String   @unique @map("access_token") @db.VarChar(50)
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @updatedAt @map("updated_at")
//   users        User     @relation(fields: [userId], references: [userId])

//   @@index([userId])
//   @@map("sessions")
// }

// model VerificationRequest {
//   verificationId String   @id @default(cuid()) @map("verification_id") @db.VarChar(50)
//   identifier     String   @map("identifier") @db.VarChar(225)
//   token          String   @unique @map("token") @db.VarChar(225)
//   expires        DateTime @map("expires")
//   createdAt      DateTime @default(now()) @map("created_at")
//   updatedAt      DateTime @updatedAt @map("updated_at")

//   @@unique([identifier, token])
//   @@map("verification_request")
// }

// Temporary fix for NextAuth Prisma schema
// Source: https://stackoverflow.com/a/75632207/15544151
// Tables affected:
// - users
// - accounts
// - sessions
// - verification_request

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique @db.VarChar(100)
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("image") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  // Some fields are optional (e.g. email, image) because they are not returned by all providers.
  username        String?        @unique
  // issue with NextAuth - Google data only returns 'name'
  // firstName       String         @map("first_name") @db.VarChar(50)
  // lastName        String         @map("last_name") @db.VarChar(50)
  title           Title?         @map("title")
  gender          Gender?        @map("gender")
  emailVerifiedAt DateTime?      @map("email_verified_at")
  password        String?        @map("password") @db.VarChar(255)
  role            Role?          @map("role")
  deletedAt       DateTime?      @map("deleted_at")
  addresses       UsersAddress[]
  tutors          Tutor[]
  students        Student[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.VarChar(50)
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_request")
}

model UsersAddress {
  addressId  Int      @id @default(autoincrement()) @map("address_id")
  userId     String   @map("user_id") @db.VarChar(50)
  address    String   @map("address") @db.VarChar(100)
  city       String   @map("city") @db.VarChar(50)
  country    String   @map("country") @db.VarChar(50)
  postalCode String   @map("postal_code") @db.VarChar(20)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  users      User     @relation(fields: [userId], references: [id]) // references User.id

  @@index([userId])
  @@map("users_address")
}

model Category {
  categoryId   Int       @id @default(autoincrement()) @map("category_id")
  categoryName String    @map("category_name") @db.VarChar(50)
  subjects     Subject[]

  @@map("categories")
}

model Subject {
  subjectId       Int              @id @default(autoincrement()) @map("subject_id")
  subjectName     String           @map("subject_name") @db.VarChar(50)
  categoryId      Int              @map("category_id")
  categories      Category         @relation(fields: [categoryId], references: [categoryId])
  tutorSubjects   TutorSubject[]
  studentSubjects StudentSubject[]
  booking         Booking[]

  @@index([categoryId])
  @@map("subjects")
}

model Tutor {
  tutorId           Int                 @id @map("tutor_id")
  userId            String              @map("user_id") @db.VarChar(50)
  aboutMe           String?             @map("about_me") @db.VarChar(255)
  verifiedAt        Boolean             @default(false) @map("verified_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  user              User                @relation(fields: [userId], references: [id]) // references User.id
  tutorAvailability TutorAvailability[]
  tutorEducation    TutorEducation[]
  tutorVideos       TutorVideo[]
  subjects          TutorSubject[]
  bookings          Booking[]
  reviews           Review[]

  @@index([userId])
  @@map("tutors")
}

model TutorAvailability {
  availabilityId Int       @id @default(autoincrement()) @map("availability_id")
  tutorId        Int       @map("tutor_id")
  dayOfWeek      DayOfWeek @map("day_of_week")
  startTime      DateTime  @map("start_time")
  endTime        DateTime  @map("end_time")
  tutors         Tutor     @relation(fields: [tutorId], references: [tutorId])

  @@index([tutorId])
  @@map("tutors_availability")
}

model TutorEducation {
  educationId Int      @id @default(autoincrement()) @map("education_id")
  tutorId     Int      @map("tutor_id")
  school      String   @map("school") @db.VarChar(100)
  degree      String   @map("degree") @db.VarChar(100)
  city        String   @map("city") @db.VarChar(50)
  country     String   @map("country") @db.VarChar(50)
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tutors      Tutor    @relation(fields: [tutorId], references: [tutorId])

  @@index([tutorId])
  @@map("tutors_education")
}

model TutorVideo {
  videoId   Int    @id @default(autoincrement()) @map("video_id")
  tutorId   Int    @map("tutor_id")
  videoLink String @map("video_link") @db.VarChar(255)
  tutors    Tutor  @relation(fields: [tutorId], references: [tutorId])

  @@index([tutorId])
  @@map("tutors_videos")
}

model TutorSubject {
  tutorId     Int     @map("tutor_id")
  subjectId   Int     @map("subject_id")
  hourlyRate  Float?  @map("hourly_rate")
  profileRate Float?  @map("profile_rate")
  tutors      Tutor   @relation(fields: [tutorId], references: [tutorId])
  subjects    Subject @relation(fields: [subjectId], references: [subjectId])

  @@id([tutorId, subjectId])
  @@index([tutorId])
  @@index([subjectId])
  @@map("tutors_subjects")
}

model Student {
  studentId Int              @id @map("student_id")
  userId    String           @map("user_id") @db.VarChar(50)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  users     User             @relation(fields: [userId], references: [id]) // references User.id
  subjects  StudentSubject[]
  bookings  Booking[]
  reviews   Review[]

  @@index([userId])
  @@map("students")
}

model StudentSubject {
  studentId Int     @map("student_id")
  subjectId Int     @map("subject_id")
  students  Student @relation(fields: [studentId], references: [studentId])
  subjects  Subject @relation(fields: [subjectId], references: [subjectId])

  @@id([studentId, subjectId])
  @@index([studentId])
  @@index([subjectId])
  @@map("students_subjects")
}

model Booking {
  bookingId         Int      @id @map("booking_id")
  tutorId           Int      @map("tutor_id")
  studentId         Int      @map("student_id")
  subjectId         Int      @map("subject_id")
  dateTimeOfSession DateTime @map("date_time_of_session")
  durationMinutes   Int      @map("duration_minutes")
  expires           DateTime @map("expires")
  tutors            Tutor    @relation(fields: [tutorId], references: [tutorId])
  students          Student  @relation(fields: [studentId], references: [studentId])
  subjects          Subject  @relation(fields: [subjectId], references: [subjectId])

  @@index([tutorId])
  @@index([studentId])
  @@index([subjectId])
  @@map("bookings")
}

model Review {
  reviewId  Int      @id @map("review_id")
  tutorId   Int      @map("tutor_id")
  studentId Int      @map("student_id")
  rating    Int      @map("rating")
  comment   String   @map("comment") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tutors    Tutor    @relation(fields: [tutorId], references: [tutorId])
  students  Student  @relation(fields: [studentId], references: [studentId])

  @@index([tutorId])
  @@index([studentId])
  @@map("reviews")
}

enum Role {
  Tutor
  Student
  Admin
}

enum Title {
  Mr
  Mrs
  Ms
  Mx
  Dr
  Prof
}

enum Gender {
  Male
  Female
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
